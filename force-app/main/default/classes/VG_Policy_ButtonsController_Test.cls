@IsTest(SeeAllData=False)
public class VG_Policy_ButtonsController_Test {
    public Static Testmethod Void EdisonTestmethod1(){
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createPolicy('Edison Motor', acc.id);        
        Policy__c pol1=pol.clone(false,true,false,false);
        pol1.VG_Renewal_Policy_Id__c = pol.id;       
        Insert pol1; 
        List<Policy_Schedule__c> pslist = new List<Policy_Schedule__c>();
        Policy_Schedule__c ps=VG_TU.createPolicySchedule(pol.id);
        Policy_Schedule__c ps1=VG_TU.createPolicySchedule(pol.id);
        pslist.add(ps);
        pslist.add(ps1);       
        Test.startTest();
        VG_Policy_ButtonsController.getPolicyStatus(pol1.id);
        //VG_Policy_ButtonsController.createRenewalPolicy(pol.id);
        VG_Policy_ButtonsController.getBasePolicy(pol.Id);   
        Test.stopTest();
    }
    public Static Testmethod Void NonPropertyTestmethod(){
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createCustomPolicy('Bridge', acc.id); 
        pol.VG_Inception_Date__c=Date.newInstance(2019, 12, 18);
        pol.VG_Expiry_Date__c=Date.newInstance(2020, 1, 18);        
       	Policy_Schedule__c ps = new Policy_Schedule__c();
        ps.RecordTypeId = Schema.SObjectType.Policy_Schedule__c.getRecordTypeInfosByName().get('Bridge').getRecordTypeId();
        ps.Name = pol.Name+'/PS/0';
        ps.Policy__c = pol.id;  
        ps.VG_Status__c = 'Draft';
        ps.IPT__c = 500;
        ps.Levies__c = 14;
        ps.Limit__c=1000;
        ps.ILF_Layer__c='Primary';
        ps.Gross_or_Net_Premium__c  = 'Gross';
        ps.Premium_Adjustment__c = 5000;
        ps.Premium_Adjustment_2__c=1000;
        ps.Endorsement_Premium_Pro__c = 25000;
        ps.Risk_Premium_Pro__c = 26000;
        ps.VG_Brokerage_Percent__c = 12.5;
        ps.VG_Fee_Income__c = 2000;
        ps.Attachment__c=2000;
        ps.Gross_Written_Premium__c = 500;
        ps.Share__c = 20;
        ps.Technical_Layer_Premium__c=450;
        ps.Written_share__c =66; 
        Insert ps;        
        Policy_Schedule__c ps1 = ps.clone(false,True,false,false);
        ps1.VG_Is_MTA__c=true;
        ps1.VG_MTA_Type__c='Revision of Cover';
        ps1.Name = pol.Name+'/PS/1';
        ps1.MTA_Parent_Policy_Schedule__c=ps.id;
        insert ps1; 
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id); 
        VG_Policy_Schedule_Endorsement__c pse=VG_TU.createPolicyScheduleEndorsement(ps.id);        
        Risk_Capture__c rc = VG_TU.createRiskCapture(ps.id);  
        VG_Policy_Schedule_Asset__c rr1 = VG_TU.createPolicyScheduleAsset(ps1.id); 
        VG_Policy_Schedule_Endorsement__c pse1 = VG_TU.createPolicyScheduleEndorsement(ps1.id);       
        Risk_Capture__c rc1 = VG_TU.createRiskCapture(ps1.id);
        Endorsement_Library__c EL = VG_TU.createEndorsementLibrary();
        pse.VG_Endorsement_Library_Id__c = EL.Id;
        update pse;
        List<VG_Exposure_Premium__c> expList=new List<VG_Exposure_Premium__c>();
        VG_Exposure_Premium__c exp1 =new VG_Exposure_Premium__c();
        exp1.VG_Factor_Name__c='Hazardous Activity';
        exp1.VG_Other_Factor__c=false;
        exp1.VG_Policy_Schedule__c=ps.id;
        exp1.VG_Rate__c=0.8000;
        exp1.VG_Rating_Factor__c='0.80>Low';
        expList.add(exp1);
        VG_Exposure_Premium__c exp2 =new VG_Exposure_Premium__c();
        exp2.VG_Factor_Name__c='Hazardous Product';
        exp2.VG_Other_Factor__c=false;
        exp2.VG_Policy_Schedule__c=ps.id;
        exp2.VG_Rate__c=1.0000;
        exp2.VG_Rating_Factor__c='1.00>Medium Low';
        expList.add(exp2);        
        Insert expList;
        Test.startTest();
        VG_Policy_ButtonsController.createRenewalPolicy(pol.id);       
        Test.stopTest();
    }
    
    public Static Testmethod Void PropertyTestmethod(){
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Utilities.SkipMethods('Bridge Context');
        Policy__c pol=VG_TU.createCustomPolicy('Bridge', acc.id); 
        pol.VG_Inception_Date__c=Date.newInstance(2019, 12, 18);
        pol.VG_Expiry_Date__c=Date.newInstance(2020, 3, 18);
        pol.Policy_Status__c ='Working';
        update pol;
        pol.Policy_Status__c ='Quoted';
        pol.VG_Sub_Status__c='Approved';
        update pol;
        pol.Policy_Status__c ='Bound';
        update pol;        
       	Policy_Schedule__c ps = new Policy_Schedule__c();
        ps.RecordTypeId = Schema.SObjectType.Policy_Schedule__c.getRecordTypeInfosByName().get('Bridge').getRecordTypeId();
        ps.Name = pol.Name+'/PS/0';
        ps.Policy__c = pol.id; 
        ps.Product__c  =  'Property';
        ps.VG_Status__c = 'Draft';
        ps.IPT__c = 500;
        ps.Levies__c = 14;
        ps.Limit__c=1000;
        ps.ILF_Layer__c='Primary';
        ps.Gross_or_Net_Premium__c  = 'Gross';
        ps.Premium_Adjustment__c = 5000;
        ps.Premium_Adjustment_2__c=1000;
        ps.Endorsement_Premium_Pro__c = 25000;
        ps.Risk_Premium_Pro__c = 26000;
        ps.VG_Brokerage_Percent__c = 12.5;
        ps.VG_Fee_Income__c = 2000;
        ps.Attachment__c=2000;
        ps.Gross_Written_Premium__c = 500;
        ps.Share__c = 20;
        ps.Technical_Layer_Premium__c=450;
        ps.Written_share__c =66; 
        Insert ps;        
        Policy_Schedule__c ps1 = ps.clone(false,True,false,false);
        ps1.VG_Is_MTA__c=true;
        ps1.VG_MTA_Type__c='Revision of Cover';
        ps1.Name = pol.Name+'/PS/1';
        ps1.MTA_Parent_Policy_Schedule__c=ps.id;
        insert ps1; 
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id); 
        VG_Policy_Schedule_Endorsement__c pse=VG_TU.createPolicyScheduleEndorsement(ps.id);        
        Risk_Capture__c rc = VG_TU.createRiskCapture(ps.id);        
        List<VG_Exposure_Premium__c> expList=new List<VG_Exposure_Premium__c>();
        VG_Exposure_Premium__c exp1 =new VG_Exposure_Premium__c();
        exp1.VG_Factor_Name__c='Hazardous Activity';
        exp1.VG_Other_Factor__c=false;
        exp1.VG_Policy_Schedule__c=ps1.id;
        exp1.VG_Rate__c=0.8000;
        exp1.VG_Rating_Factor__c='0.80>Low';
        expList.add(exp1);
        VG_Exposure_Premium__c exp2 =new VG_Exposure_Premium__c();
        exp2.VG_Factor_Name__c='Hazardous Product';
        exp2.VG_Other_Factor__c=false;
        exp2.VG_Policy_Schedule__c=ps1.id;
        exp2.VG_Rate__c=1.0000;
        exp2.VG_Rating_Factor__c='1.00>Medium Low';
        expList.add(exp2);        
        Insert expList;
        Test.startTest();
        VG_Policy_ButtonsController.createRenewalPolicy(pol.id);
        Utilities.clearMethods();
        Test.stopTest();
    }
    
    public Static Testmethod Void CCTestmethod(){
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Utilities.SkipMethods('Bridge Context');
        Policy__c pol=VG_TU.createCustomPolicy('Bridge', acc.id); 
        pol.VG_Inception_Date__c=Date.newInstance(2018, 2, 28);
        pol.VG_Expiry_Date__c=Date.newInstance(2019, 2, 27);
        pol.Policy_Status__c ='Working';
        update pol;
        pol.Policy_Status__c ='Quoted';
        pol.VG_Sub_Status__c='Approved';
        update pol;
        pol.Policy_Status__c ='Bound';
        update pol;
       	Policy_Schedule__c ps = new Policy_Schedule__c();
        ps.RecordTypeId = Schema.SObjectType.Policy_Schedule__c.getRecordTypeInfosByName().get('Bridge').getRecordTypeId();
        ps.Name = pol.Name+'/PS/0';
        ps.Policy__c = pol.id; 
        ps.Product__c ='Commercial Combined';
        ps.VG_Status__c = 'Draft';
        ps.IPT__c = 500;
        ps.Levies__c = 14;
        ps.Limit__c=1000;
        ps.ILF_Layer__c='Primary';
        ps.Gross_or_Net_Premium__c  = 'Gross';
        ps.Premium_Adjustment__c = 5000;
        ps.Premium_Adjustment_2__c=1000;
        ps.Endorsement_Premium_Pro__c = 25000;
        ps.Risk_Premium_Pro__c = 26000;
        ps.VG_Brokerage_Percent__c = 12.5;
        ps.VG_Fee_Income__c = 2000;
        ps.Attachment__c=2000;
        ps.Gross_Written_Premium__c = 500;
        ps.Share__c = 20;
        ps.Technical_Layer_Premium__c=450;
        ps.Written_share__c =66; 
        Insert ps;        
        Policy_Schedule__c ps1 = ps.clone(false,True,false,false);
        ps1.VG_Is_MTA__c=true;
        ps1.VG_MTA_Type__c='Revision of Cover';
        ps1.Name = pol.Name+'/PS/1';
        ps1.MTA_Parent_Policy_Schedule__c=ps.id;
        insert ps1; 
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id); 
        VG_Policy_Schedule_Endorsement__c pse=VG_TU.createPolicyScheduleEndorsement(ps.id);        
        Risk_Capture__c rc = VG_TU.createRiskCapture(ps.id);        
        Test.startTest();
        VG_Policy_ButtonsController.createRenewalPolicy(pol.id);
        Utilities.clearMethods();
        Test.stopTest();
    }
    
    public Static Testmethod Void CatchblockTestmethod(){
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createCustomPolicy('Bridge', acc.id); 
        VG_Functionality_Switches__c cs2 = VG_Functionality_Switches__c.getInstance();
        System.debug('check::'+cs2+':'+cs2.Skip_Validation__c);
        //insert new VG_Functionality_Switches__c(SetupOwnerId=UserInfo.getOrganizationId(), Skip_Validation__c=True);
        VG_Functionality_Switches__c cs = VG_Functionality_Switches__c.getOrgDefaults();
        cs.Skip_Validation__c = True;
        Insert cs;
        System.debug('skip::'+cs.Skip_Validation__c);
        List<VG_Validations__c> valList = new List<VG_Validations__c>();
        VG_Validations__c val = new VG_Validations__c();
        val.Name = 'Policy_23_Bridge';
        val.VG_Field_API__c ='VG_LTA__c';
        val.VG_Field_Label__c='LTA flag';
        val.VG_Level__c='Policy';
        val.VG_Policy_Status__c='Prospect';
        val.VG_RecordTypeName__c='Bridge';
        val.VG_Type__c='Null check';
        val.VG_Value__c='';
        valList.add(val);        
        Insert valList;
        Policy_Schedule__c ps = new Policy_Schedule__c();
        ps.RecordTypeId = Schema.SObjectType.Policy_Schedule__c.getRecordTypeInfosByName().get('Bridge').getRecordTypeId();
        ps.Name = pol.Name+'/PS/0';
        ps.Policy__c = pol.id; 
        ps.Product__c ='Commercial Combined';
        ps.VG_Status__c = 'Draft';
        ps.IPT__c = 500;
        ps.Levies__c = 14;
        ps.Limit__c=1000;
        ps.ILF_Layer__c='Primary';
        ps.Gross_or_Net_Premium__c  = 'Gross';
        ps.Premium_Adjustment__c = 5000;
        ps.Premium_Adjustment_2__c=1000;
        ps.Endorsement_Premium_Pro__c = 25000;
        ps.Risk_Premium_Pro__c = 26000;
        ps.VG_Brokerage_Percent__c = 12.5;
        ps.VG_Fee_Income__c = 2000;
        ps.Attachment__c=2000;
        ps.Gross_Written_Premium__c = 500;
        ps.Share__c = 20;
        ps.Technical_Layer_Premium__c=450;
        ps.Written_share__c =66;
        Insert ps;
       	   
        Policy_Schedule__c ps1 = ps.clone(false,True,false,false);
        ps1.VG_Is_MTA__c=true;
        ps1.VG_MTA_Type__c='Revision of Cover';
        ps1.Name = pol.Name+'/PS/1';
        ps1.MTA_Parent_Policy_Schedule__c=ps.id;
        insert ps1;
        
        System.debug('e.getMessage()::'+pol.VG_Ignore_Validation__c+pol.Policy_Status__c);
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id); 
        VG_Policy_Schedule_Endorsement__c pse=VG_TU.createPolicyScheduleEndorsement(ps.id);        
        Risk_Capture__c rc = VG_TU.createRiskCapture(ps.id);        
        Test.startTest();
        cs.Skip_Validation__c = false;
        update cs;
        VG_Policy_ButtonsController.createRenewalPolicy(pol.id);
        Test.stopTest();
    }
    
    public Static Testmethod Void PSCatchblockTestmethod(){
        VG_TU.policyCustomSetting();
        Account acc=VG_TU.createAccount('Customer');
        Policy__c pol=VG_TU.createCustomPolicy('Bridge', acc.id); 
        pol.VG_Inception_Date__c=Date.newInstance(2018, 2, 28);
        pol.VG_Expiry_Date__c=Date.newInstance(2019, 3, 2);
		update pol;
        VG_Functionality_Switches__c cs2 = VG_Functionality_Switches__c.getInstance();
        System.debug('check::'+cs2+':'+cs2.Skip_Validation__c);
        VG_Functionality_Switches__c cs = VG_Functionality_Switches__c.getOrgDefaults();
        cs.Skip_Validation__c = True;
        Insert cs;
        System.debug('skip::'+cs.Skip_Validation__c);
        List<VG_Validations__c> valList = new List<VG_Validations__c>();
        VG_Validations__c val = new VG_Validations__c();
        val.Name = 'Policy_23_Bridge';
        val.VG_Field_API__c ='Product__c';
        val.VG_Field_Label__c='Product';
        val.VG_Level__c='Policy Schedule ';
        val.VG_Policy_Status__c='Prospect';
        val.VG_RecordTypeName__c='Bridge';
        val.VG_Type__c='Null check';
        val.VG_Value__c='';
        valList.add(val); 
        VG_Validations__c val1 = new VG_Validations__c();
        val1.Name = 'Policy_Schedule_BDG5';
        val1.VG_Field_API__c ='VG_Deductible__c';
        val1.VG_Field_Label__c='Deductible';
        val1.VG_Level__c='Policy Schedule';
        val1.VG_Policy_Status__c='Prospect';
        val1.VG_RecordTypeName__c='Bridge';
        val1.VG_Type__c='Null check';
        valList.add(val1);
        Insert valList;
        Policy_Schedule__c ps = new Policy_Schedule__c();
        ps.RecordTypeId = Schema.SObjectType.Policy_Schedule__c.getRecordTypeInfosByName().get('Bridge').getRecordTypeId();
        ps.Name = pol.Name+'/PS/0';
        ps.Policy__c = pol.id; 
        ps.VG_Status__c = 'Draft';
        ps.IPT__c = 500;
        ps.Levies__c = 14;
        ps.Limit__c=1000;
        ps.ILF_Layer__c='Primary';
        ps.Gross_or_Net_Premium__c  = 'Gross';
        ps.Premium_Adjustment__c = 5000;
        ps.Premium_Adjustment_2__c=1000;
        ps.Endorsement_Premium_Pro__c = 25000;
        ps.Risk_Premium_Pro__c = 26000;
        ps.VG_Brokerage_Percent__c = 12.5;
        ps.VG_Fee_Income__c = 2000;
        ps.Attachment__c=2000;
        ps.Gross_Written_Premium__c = 500;
        ps.Share__c = 20;
        ps.Technical_Layer_Premium__c=450;
        ps.Written_share__c =66;
        Insert ps;
       	   
        Policy_Schedule__c ps1 = ps.clone(false,True,false,false);
        ps1.VG_Is_MTA__c=true;
        ps1.VG_Status__c='Booked';
        ps1.VG_MTA_Type__c='Revision of Cover';
        ps1.Name = pol.Name+'/PS/1';
        ps1.MTA_Parent_Policy_Schedule__c=ps.id;
        insert ps1;
        VG_Policy_Schedule_Asset__c rr=VG_TU.createPolicyScheduleAsset(ps.id); 
        VG_Policy_Schedule_Endorsement__c pse=VG_TU.createPolicyScheduleEndorsement(ps.id);        
        Risk_Capture__c rc = VG_TU.createRiskCapture(ps.id);        
        Test.startTest();
        cs.Skip_Validation__c = false;
        update cs;
        System.debug('skip2::'+cs.Skip_Validation__c+pol.VG_LTA__c);
        VG_Policy_ButtonsController.createRenewalPolicy(pol.id);
        Test.stopTest();
    }
}